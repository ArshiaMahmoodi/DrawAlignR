sub= paste("Shift =", shift, ", Error =", RT - shift - Reference_RT), col.sub='purple', font.sub=2)
lines(chrom$'960'[[2]]$time, chrom$'960'[[2]]$X73523, col='gray')
lines(chrom$'960'[[3]]$time, chrom$'960'[[3]]$X73532, col='gray')
lines(chrom$'960'[[4]]$time, chrom$'960'[[4]]$X73580, col='gray')
lines(chrom$'960'[[5]]$time, chrom$'960'[[5]]$X73635, col='gray')
lines(chrom$'960'[[6]]$time, chrom$'960'[[6]]$X73664, col='gray')
abline(v=RT, lty= 2, col = 'black', lwd = 2)
lines(chrom$'960'[[1]]$time - shift, chrom$'960'[[1]]$X73440, col='black')
lines(chrom$'960'[[2]]$time - shift, chrom$'960'[[2]]$X73523, col='red')
lines(chrom$'960'[[3]]$time - shift, chrom$'960'[[3]]$X73532, col='blue')
lines(chrom$'960'[[4]]$time - shift, chrom$'960'[[4]]$X73580, col='yellow')
lines(chrom$'960'[[5]]$time - shift, chrom$'960'[[5]]$X73635, col='purple')
lines(chrom$'960'[[6]]$time - shift, chrom$'960'[[6]]$X73664, col='green')
abline(v=RT - shift, lty= 2, col = 'black', lwd = 2)
abline(v=Reference_RT, col = 'green', lwd = 2)
arrows(RT, 3000, RT-shift, 3000, length = 0.20, angle = 30, code = 2, col = 'purple', lwd = 3)
}
plot_aligned(chrom12_GR.mzML_ChromSelected, 49.25, 960, 12, 13, 2470.89, 2420.42,2451.82, 2495.44, 630.2936, "VGEGTY(Phospho)GVVYK(Label:13C(6)15N(2))")
plot_chrom_reference(chrom13_GR.mzML_ChromSelected, 960, 13, 2420.42, 2404.61, 2440.96, 630.2936, "VGEGTY(Phospho)GVVYK(Label:13C(6)15N(2))")
plot_aligned(chrom12_GR.mzML_ChromSelected, 49.25, 960, 12, 13, 2470.89, 2420.42,2451.82, 2495.44, 630.2936, "VGEGTY(Phospho)GVVYK(Label:13C(6)15N(2))")
plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 960, 12, 2470.89, 2451.82, 2495.44, 630.2936, "VGEGTY(Phospho)GVVYK(Label:13C(6)15N(2))")
plot_chrom_reference(chrom13_GR.mzML_ChromSelected, 960, 13, 2420.42, 2404.61, 2440.96, 630.2936, "VGEGTY(Phospho)GVVYK(Label:13C(6)15N(2))")
plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 960, 12, 2470.89, 2451.82, 2495.44, 630.2936, "VGEGTY(Phospho)GVVYK(Label:13C(6)15N(2))")
# A function for plotting the ms2 chromatogram of any peptide. It's usage is to plot the reference chromatogram,
# which is the run that all other chromatograms are aligned to.
#
# @param chrom rds chromatogram file which contains a list of peptides with their retention times and intensities.
#
# @param peptide the precursor id of the specific peptide you would like to plot.
#
# @param Run_Id The run from which the peptide came from
#
# #param RT The retention time of the peptide
#
# #param Left_width Left width of the retention time
#
# #param Right_width Right width of the retention time
#
# #param mz The mass to charge value of the precursor
#
# #param The sequence of the precursor
#
# @return None. Produces plot output.
plot_chrom_reference <- function(chrom, precursor, Run_ID, RT, Left_width, Right_width, mz, sequence) {
precursor_string <- toString(precursor)
plot(chrom$'960'[[1]]$time, chrom$'960'[[1]]$X73440, type='l',
main= paste("Ms2 Chromatogram of Precursor",precursor_string,"Run", Run_ID, "\n",  sequence, ",", "M/Z= ", mz),
xlab="Retention time (s)", ylab="Intensity",
font.main=2, font.lab=4, col.main='blue',
xlim= c(2350,2550))
lines(chrom$'960'[[2]]$time, chrom$'960'[[2]]$X73523, col='red')
lines(chrom$'960'[[3]]$time, chrom$'960'[[3]]$X73532, col='blue')
lines(chrom$'960'[[4]]$time, chrom$'960'[[4]]$X73580, col='yellow')
lines(chrom$'960'[[5]]$time, chrom$'960'[[5]]$X73635, col='purple')
lines(chrom$'960'[[6]]$time, chrom$'960'[[6]]$X73664, col='green')
abline(v=RT, lty= 2, col = 'red', lwd = 2)
abline(v=Left_width , lty= 2)
abline(v=Right_width, lty = 2)
}
plot_chrom_reference(chrom13_GR.mzML_ChromSelected, 960, 13, 2420.42, 2404.61, 2440.96, 630.2936, "VGEGTY(Phospho)GVVYK(Label:13C(6)15N(2))")
plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 960, 12, 2470.89, 2451.82, 2495.44, 630.2936, "VGEGTY(Phospho)GVVYK(Label:13C(6)15N(2))")
plot_aligned(chrom12_GR.mzML_ChromSelected, 49.25, 960, 12, 13, 2470.89, 2420.42,2451.82, 2495.44, 630.2936, "VGEGTY(Phospho)GVVYK(Label:13C(6)15N(2))")
install.packages("devtools")
library("devtools")
install.packages("roxygen2")
library("roxygen2")
getwd()
devtools::document()
library(devtools)
install.packages("glue")
install.packages("glue")
library(devtools)
devtools::document()
devtools::document()
devtools::()document(plot_chrom_reference())
devtools::()plot_chrom_reference()
devtools::document(plot_chrom_reference())
devtools::plot_chrom_reference()
devtools::document()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
#' A function for the visualization of an aligned chromatogram to a reference chromatogram
#'
#' @param chrom rds chromatogram file which contains a list of peptides with their retention times and intensities.
#'
#' @param peptide the precursor id of the specific peptide you would like to plot.
#'
#' @param shift The specific retention time shift of the alignment, obtained upstream using DialignR
#'
#' @param Run_Id The run from which the peptide came from
#'
#' @param Reference_Id The reference run/precursor to which this peptide was aligned to.
#'
#' @param Reference_RT The retention time of the precursor in the reference run.
#'
#' @param RT The retention time of the peptide
#'
#' @param Left_width Left width of the retention time
#
#' @param Right_width Right width of the retention time
#'
#' @param mz The mass to charge value of the precursor
#'
#' @param The sequence of the precursor
#'
#' @return None. Produces plot output.
#'
#' @export
plot_aligned <- function(chrom, shift, precursor, Run_ID, Reference_ID, RT, Reference_RT,
Left_width, Right_width, mz, sequence) {
precursor_string <- toString(precursor)
plot(chrom$'960'[[1]]$time, chrom$'960'[[1]]$X73440, type='l', col='gray',
main= paste("Aligned Ms2 Chromatogram of Precursor",precursor_string, "Run", Run_ID, "\n",  sequence, ",", "M/Z= ", mz),
xlab="Retention time (s)", ylab="Intensity",
font.main=2, font.lab=4, col.main='blue',
xlim= c(2350,2550),
sub= paste("Shift =", shift, ", Error =", RT - shift - Reference_RT), col.sub='purple', font.sub=2)
lines(chrom$'960'[[2]]$time, chrom$'960'[[2]]$X73523, col='gray')
lines(chrom$'960'[[3]]$time, chrom$'960'[[3]]$X73532, col='gray')
lines(chrom$'960'[[4]]$time, chrom$'960'[[4]]$X73580, col='gray')
lines(chrom$'960'[[5]]$time, chrom$'960'[[5]]$X73635, col='gray')
lines(chrom$'960'[[6]]$time, chrom$'960'[[6]]$X73664, col='gray')
abline(v=RT, lty= 2, col = 'black', lwd = 2)
lines(chrom$'960'[[1]]$time - shift, chrom$'960'[[1]]$X73440, col='black')
lines(chrom$'960'[[2]]$time - shift, chrom$'960'[[2]]$X73523, col='red')
lines(chrom$'960'[[3]]$time - shift, chrom$'960'[[3]]$X73532, col='blue')
lines(chrom$'960'[[4]]$time - shift, chrom$'960'[[4]]$X73580, col='yellow')
lines(chrom$'960'[[5]]$time - shift, chrom$'960'[[5]]$X73635, col='purple')
lines(chrom$'960'[[6]]$time - shift, chrom$'960'[[6]]$X73664, col='green')
abline(v=RT - shift, lty= 2, col = 'black', lwd = 2)
abline(v=Reference_RT, col = 'green', lwd = 2)
arrows(RT, 3000, RT-shift, 3000, length = 0.20, angle = 30, code = 2, col = 'purple', lwd = 3)
}
#' A function for plotting the ms2 chromatogram of any peptide. It's usage is to plot the reference chromatogram,
#' which is the run that all other chromatograms are aligned to.
#'
#' @param chrom rds chromatogram file which contains a list of peptides with their retention times and intensities.
#'
#' @param peptide the precursor id of the specific peptide you would like to plot.
#'
#' @param Run_Id The run from which the peptide came from
#'
#' @param RT The retention time of the peptide
#'
#' @param Left_width Left width of the retention time
#'
#' @param Right_width Right width of the retention time
#'
#' @param mz The mass to charge value of the precursor
#'
#' @param The sequence of the precursor
#
#' @return None. Produces plot output.
#'
#' @export
plot_chrom_reference <- function(chrom, precursor, Run_ID, RT, Left_width, Right_width, mz, sequence) {
precursor_string <- toString(precursor)
plot(chrom$'960'[[1]]$time, chrom$'960'[[1]]$X73440, type='l',
main= paste("Ms2 Chromatogram of Precursor",precursor_string,"Run", Run_ID, "\n",  sequence, ",", "M/Z= ", mz),
xlab="Retention time (s)", ylab="Intensity",
font.main=2, font.lab=4, col.main='blue',
xlim= c(2350,2550))
lines(chrom$'960'[[2]]$time, chrom$'960'[[2]]$X73523, col='red')
lines(chrom$'960'[[3]]$time, chrom$'960'[[3]]$X73532, col='blue')
lines(chrom$'960'[[4]]$time, chrom$'960'[[4]]$X73580, col='yellow')
lines(chrom$'960'[[5]]$time, chrom$'960'[[5]]$X73635, col='purple')
lines(chrom$'960'[[6]]$time, chrom$'960'[[6]]$X73664, col='green')
abline(v=RT, lty= 2, col = 'red', lwd = 2)
abline(v=Left_width , lty= 2)
abline(v=Right_width, lty = 2)
}
library(testthat)
library(plot_aligned.R)
library(plot_chrom_reference.R)
test_check(plot_aligned.R)
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, test)
expect_true(is.plot(p))
expect_identical(p$labels$y, "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, test)
#expect_true(is.plot(p))
expect_identical(p$labels$y, "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, test)
#expect_true(is.plot(p))
#expect_identical(, "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, test)
#expect_true(is.plot(p))
#expect_identical(, "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, test)
#expect_true(is.plot(p))
#expect_identical(, "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, test)
#expect_true(is.plot(p))
#expect_identical(, "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, test)
#expect_true(is.plot(p))
#expect_identical(, "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
#p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, test)
#expect_true(is.plot(p))
#expect_identical(, "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, test)
#expect_true(is.plot(p))
#expect_identical(, "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
#expect_true(is.plot(p))
#expect_identical(, "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
expect_true(is.plot(p))
#expect_identical(, "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
#expect_true(is.plot(p))
expect_identical(, "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
#expect_true(is.plot(p))
expect_identical(p$labels$y, "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
print(typeof(p))
#expect_true(is.plot(p))
#expect_identical(p., "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
expect_true(typeof(p) = NULL)
#expect_identical(p., "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
expect_true(typeof(p) == NULL)
#expect_identical(p., "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
expect_true(is.na(p))
#expect_identical(p., "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
expect_true(is.null(p))
#expect_identical(p., "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
expect_true(is.null(p))
#expect_identical(p., "Retention time (s)")
})
library(DrawAlignR)
context("Visualization functions")
test_that("Plot data type is null", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
expect_true(is.null(p))
})
test_that("X axis is labelled 'Retention time (s)'", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
})
library(DrawAlignR)
context("Visualization functions")
test_that("Plot data type is null", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
expect_true(is.null(p))
})
test_that("Test that input values are valid", {
chrom <- chrom13_GR.mzML_ChromSelected
precursor <- 960
Run_ID <- 13
RT <- 2420.42
Left_width <- 2404.61
Right_width <- 2440.96
mz <- 630.2936
sequence <- "VGEGTY(Phospho)GVVYK(Label:13C(6)15N(2))"
p <- plot_chrom_reference(chrom, precursor, Run_ID, RT, Left_width, Right_width, mz, sequence)
})
library(DrawAlignR)
context("Visualization functions")
test_that("Plot data type is null", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
expect_true(is.null(p))
})
test_that("Test that input values are valid", {
chrom <- chrom13_GR.mzML_ChromSelected
precursor <- 960
Run_ID <- 13
RT <- 2420.42
Left_width <- 2404.61
Right_width <- 2440.96
mz <- 630.2936
sequence <- "VGEGTY(Phospho)GVVYK(Label:13C(6)15N(2))"
p <- plot_chrom_reference(chrom, precursor, Run_ID, RT, Left_width, Right_width, mz, sequence)
expect_true(is.numeric(precursor))
expect_true(is.numeric(Run_ID))
expect_true(is.numeric(RT))
expect_true(is.numeric(Left_width))
expect_true(is.numeric(Right_width))
expect_true(is.numeric(mz))
expect_true(is.character(sequence()))
})
library(DrawAlignR)
context("Visualization functions")
test_that("Plot data type is null", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
expect_true(is.null(p))
})
test_that("Test that input values are valid", {
chrom <- chrom13_GR.mzML_ChromSelected
precursor <- 960
Run_ID <- 13
RT <- 2420.42
Left_width <- 2404.61
Right_width <- 2440.96
mz <- 630.2936
sequence <- "VGEGTY(Phospho)GVVYK(Label:13C(6)15N(2))"
p <- plot_chrom_reference(chrom, precursor, Run_ID, RT, Left_width, Right_width, mz, sequence)
expect_true(is.numeric(precursor))
expect_true(is.numeric(Run_ID))
expect_true(is.numeric(RT))
expect_true(is.numeric(Left_width))
expect_true(is.numeric(Right_width))
expect_true(is.numeric(mz))
expect_true(is.character(sequence)
})
library(DrawAlignR)
context("Visualization functions")
test_that("Plot data type is null", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
expect_true(is.null(p))
})
test_that("Test that input values are valid", {
chrom <- chrom13_GR.mzML_ChromSelected
precursor <- 960
Run_ID <- 13
RT <- 2420.42
Left_width <- 2404.61
Right_width <- 2440.96
mz <- 630.2936
sequence <- "VGEGTY(Phospho)GVVYK(Label:13C(6)15N(2))"
p <- plot_chrom_reference(chrom, precursor, Run_ID, RT, Left_width, Right_width, mz, sequence)
expect_true(is.numeric(precursor))
expect_true(is.numeric(Run_ID))
expect_true(is.numeric(RT))
expect_true(is.numeric(Left_width))
expect_true(is.numeric(Right_width))
expect_true(is.numeric(mz))
expect_true(is.character(sequence))
})
library(DrawAlignR)
context("Visualization functions")
test_that("Plot data type is null", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
expect_true(is.null(p))
})
test_that("Test that input values are valid", {
chrom <- chrom13_GR.mzML_ChromSelected
precursor <- 960
Run_ID <- 13
RT <- 2420.42
Left_width <- 2404.61
Right_width <- 2440.96
mz <- 630.2936
sequence <- "VGEGTY(Phospho)GVVYK(Label:13C(6)15N(2))"
p <- plot_chrom_reference(chrom, precursor, Run_ID, RT, Left_width, Right_width, mz, sequence)
expect_true(is.numeric(precursor))
expect_true(precursor > 0)
expect_true(is.numeric(Run_ID))
expect_true(Run_ID > 0)
expect_true(is.numeric(RT))
expect_true(is.numeric(Left_width))
expect_true(is.numeric(Right_width))
expect_true(Left_width < Right_width)
expect_true(is.numeric(mz))
expect_true(mz > 0)
expect_true(is.character(sequence))
})
library(DrawAlignR)
context("Visualization functions")
test_that("Plot data type is null", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
expect_true(is.null(p))
})
test_that("Test that input values are valid", {
chrom <- chrom13_GR.mzML_ChromSelected
precursor <- 960
Run_ID <- 13
RT <- 2420.42
Left_width <- 2404.61
Right_width <- 2440.96
mz <- 630.2936
sequence <- "VGEGTY(Phospho)GVVYK(Label:13C(6)15N(2))"
p <- plot_chrom_reference(chrom, precursor, Run_ID, RT, Left_width, Right_width, mz, sequence)
expect_true(is.numeric(precursor))
expect_true(precursor > 0)
expect_true(is.numeric(Run_ID))
expect_true(Run_ID > 0)
expect_true(is.numeric(RT))
expect_true(is.numeric(Left_width))
expect_true(is.numeric(Right_width))
expect_true(Right_width > RT)
expect_true(Left_width < RT)
expect_true(Left_width < Right_width)
expect_true(is.numeric(mz))
expect_true(mz > 0)
expect_true(is.character(sequence))
})
library(testthat)
library(DrawAlignR)
test_check("DrawAlignR")
context("Visualization functions")
library(DrawAlignR)
test_that("Plot data type is null", {
p <- plot_chrom_reference(chrom12_GR.mzML_ChromSelected, 0, 0, 0, 0, 0, 0, "test")
expect_true(is.null(p))
})
test_that("Test that input values are valid", {
chrom <- chrom13_GR.mzML_ChromSelected
precursor <- 960
Run_ID <- 13
RT <- 2420.42
Left_width <- 2404.61
Right_width <- 2440.96
mz <- 630.2936
sequence <- "VGEGTY(Phospho)GVVYK(Label:13C(6)15N(2))"
p <- plot_chrom_reference(chrom, precursor, Run_ID, RT, Left_width, Right_width, mz, sequence)
expect_true(is.numeric(precursor))
expect_true(precursor > 0)
expect_true(is.numeric(Run_ID))
expect_true(Run_ID > 0)
expect_true(is.numeric(RT))
expect_true(is.numeric(Left_width))
expect_true(is.numeric(Right_width))
expect_true(Right_width > RT)
expect_true(Left_width < RT)
expect_true(Left_width < Right_width)
expect_true(is.numeric(mz))
expect_true(mz > 0)
expect_true(is.character(sequence))
})
library(testthat)
library(DrawAlignR)
test_check("DrawAlignR")
devtools::test()
devtools::test()
install_github("fuscada2/PeakMapper")
library(devtools)
install_github("fuscada2/PeakMapper")
library(devtools)
install_github("ArshiaMahmoodi/DrawAlignR")
library(DrawAlignR)
plot_aligned()
